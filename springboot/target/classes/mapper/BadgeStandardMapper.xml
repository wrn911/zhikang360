<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.mapper.BadgeStandardMapper">

    <sql id="Base_Column_List">
        id, type, name, days, description, url
    </sql>

    <!-- 获取用户已获得的徽章标准 -->
    <select id="selectEarnedBadges" resultType="com.example.entity.BadgeStandard">
        SELECT
        <include refid="Base_Column_List"/>
        FROM badge_standard
        WHERE id IN (
        SELECT badge_id
        FROM my_badge
        WHERE user_id = #{userId}
        )
    </select>

    <!-- 获取用户已获得的新徽章标准 -->
    <select id="selectEarnedNewBadges" resultType="com.example.entity.BadgeStandard">
        SELECT
        <include refid="Base_Column_List"/>
        FROM badge_standard
        WHERE id IN (
        SELECT badge_id
        FROM my_badge
        WHERE user_id = #{userId} AND if_new = true
        )
    </select>

    <!-- 获取用户未获得的徽章标准 -->
    <select id="selectUnownedBadges" resultType="com.example.entity.BadgeStandard">
        SELECT
        <include refid="Base_Column_List"/>
        FROM badge_standard
        WHERE id NOT IN (
        SELECT badge_id
        FROM my_badge
        WHERE user_id = #{userId}
        )
    </select>

    <insert id="insert" parameterType="com.example.entity.BadgeStandard" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO badge_standard
        (type, name, days, description, url)
        VALUES (#{type}, #{name}, #{days}, #{description}, #{url})
    </insert>

    <insert id="insertPersonBadge" parameterType="com.example.entity.MyBadge" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO my_badge
        (user_id, badge_id, if_new)
        VALUES (#{userId}, #{badgeId}, #{ifNew})
    </insert>

    <delete id="deleteById">
        DELETE FROM badge_standard WHERE id = #{id}
    </delete>

    <update id="updateById" parameterType="com.example.entity.BadgeStandard">
        UPDATE badge_standard
        <set>
            <if test="type != null">type = #{type},</if>
            <if test="name != null">name = #{name},</if>
            <if test="days != null">days = #{days},</if>
            <if test="description != null">description = #{description},</if>
            <if test="url != null">url = #{url}</if>
        </set>
        WHERE id = #{id}
    </update>

    <update id="updatePersonBadge" parameterType="com.example.entity.MyBadge">
        UPDATE my_badge
        <set>
            if_new = false
        </set>
        WHERE user_id = #{userId} AND badge_id = #{badgeId}
    </update>

    <select id="selectById" resultType="com.example.entity.BadgeStandard">
        SELECT <include refid="Base_Column_List"/>
        FROM badge_standard WHERE id = #{id}
    </select>

    <select id="selectIdByTypeAndDays" resultType="java.lang.Integer">
        SELECT id
        FROM badge_standard <!-- 根据实际表名修改 -->
        WHERE type = #{type}
        AND days = #{days}
        LIMIT 1 <!-- 增强型保障，即使未设置唯一约束也能确保结果唯一 -->
    </select>

    <select id="selectAll" resultType="com.example.entity.BadgeStandard">
        SELECT <include refid="Base_Column_List"/>
        FROM badge_standard
        <where>
            <if test="type != null">AND type = #{type}</if>
            <if test="name != null and name != ''">AND name LIKE CONCAT('%', #{name}, '%')</if>
            <if test="days != null">AND days = #{days}</if>
        </where>
        ORDER BY days ASC
    </select>

    <select id="selectPersonBadgeAll" resultType="com.example.entity.MyBadge">
        SELECT
        id,
        user_id,
        badge_id
        FROM my_badge
        <where>
            <if test="id != null">AND id = #{id}</if>
            <if test="userId != null and userId != ''">AND user_id = #{userId}</if>
            <if test="badgeId != null">AND badge_id = #{badgeId}</if>
        </where>
    </select>

</mapper>