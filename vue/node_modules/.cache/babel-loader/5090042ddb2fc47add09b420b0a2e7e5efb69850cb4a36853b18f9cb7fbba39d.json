{"ast":null,"code":"export default {\n  name: \"BadgeStandard\",\n  data() {\n    return {\n      tableData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      badgeName: null,\n      badgeType: null,\n      formVisible: false,\n      form: {},\n      rules: {\n        type: [{\n          required: true,\n          message: '请选择勋章类型',\n          trigger: 'change'\n        }],\n        name: [{\n          required: true,\n          message: '请输入勋章名称',\n          trigger: 'blur'\n        }, {\n          min: 2,\n          max: 20,\n          message: '长度在 2 到 20 个字符',\n          trigger: 'blur'\n        }],\n        days: [{\n          required: true,\n          message: '请输入达标天数',\n          trigger: 'blur'\n        }, {\n          type: 'number',\n          message: '必须为数字值',\n          trigger: 'blur'\n        }]\n      },\n      ids: [],\n      // 当前需要更改图片的记录（用于表格行的手动更改图片）\n      currentRow: null\n    };\n  },\n  created() {\n    this.load(1);\n  },\n  methods: {\n    // 新增记录\n    handleAdd() {\n      this.form = {\n        type: '饮食',\n        days: 0\n      };\n      this.formVisible = true;\n    },\n    // 编辑记录\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row));\n      this.formVisible = true;\n    },\n    // 保存记录（新增或更新）\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/badgeStandard/update' : '/badgeStandard/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              this.$message.success('保存成功');\n              this.load(1);\n              this.formVisible = false;\n            } else {\n              this.$message.error(res.msg);\n            }\n          });\n        }\n      });\n    },\n    // 删除单个记录\n    del(id) {\n      this.$confirm('确认删除该记录？', '警告', {\n        type: 'warning'\n      }).then(() => {\n        this.$request.delete(`/badgeStandard/delete/${id}`).then(res => {\n          if (res.code === '200') {\n            this.load(1);\n            this.$message.success('操作成功');\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      });\n    },\n    // 多选框变化\n    handleSelectionChange(rows) {\n      this.ids = rows.map(item => item.id);\n    },\n    // 批量删除\n    delBatch() {\n      if (!this.ids.length) return this.$message.warning('请选择数据');\n      this.$confirm('确认批量删除选中记录？', '警告', {\n        type: 'warning'\n      }).then(() => {\n        this.$request.delete('/badgeStandard/delete/batch', {\n          data: this.ids\n        }).then(res => {\n          if (res.code === '200') {\n            this.load(1);\n            this.$message.success('操作成功');\n          } else {\n            this.$message.error(res.msg);\n          }\n        });\n      });\n    },\n    // 分页加载\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum;\n      this.$request.get('/badgeStandard/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          badgeName: this.badgeName,\n          badgeType: this.badgeType\n        }\n      }).then(res => {\n        this.tableData = res.data?.list;\n        this.total = res.data?.total;\n      });\n    },\n    // 重置搜索条件\n    reset() {\n      this.badgeName = null;\n      this.badgeType = null;\n      this.load(1);\n    },\n    // 分页切换\n    handleCurrentChange(pageNum) {\n      this.pageNum = pageNum;\n      this.load(pageNum);\n    },\n    handleAvatarSuccess(response, file, fileList) {\n      // 把user的头像属性换成上传的图片的链接\n      this.$set(this.form, 'avatar', response.data);\n    },\n    // 表格行“AI生成图片”调用后端生成接口\n    handleAIGenerate(row) {\n      this.$request.post('/py/create', {\n        id: row.id\n      }).then(res => {\n        if (res.code === '200') {\n          row.url = res.data.url;\n          this.$message.success('AI生成图片成功');\n        } else {\n          this.$message.error(res.msg);\n        }\n      });\n    },\n    // 对话框中上传图片成功回调（借鉴头像上传方式）\n    //handleAvatarSuccess(response, file) {\n    // response.data 包含图片地址\n    //this.$set(this.form, 'url', response.data)\n    //this.$message.success('图片上传成功')\n    // 如果当前为编辑状态，则自动调用 update 更新记录\n    //if (this.form.id) {\n    //this.save()\n    //}\n    //},\n    // 上传前校验（可选）\n    beforeAvatarUpload(file) {\n      const isImage = file.type.indexOf('image/') === 0;\n      if (!isImage) {\n        this.$message.error('上传文件必须为图片格式');\n      }\n      return isImage;\n    }\n  }\n};","map":{"version":3,"names":["name","data","tableData","pageNum","pageSize","total","badgeName","badgeType","formVisible","form","rules","type","required","message","trigger","min","max","days","ids","currentRow","created","load","methods","handleAdd","handleEdit","row","JSON","parse","stringify","save","$refs","formRef","validate","valid","$request","url","id","method","then","res","code","$message","success","error","msg","del","$confirm","delete","handleSelectionChange","rows","map","item","delBatch","length","warning","get","params","list","reset","handleCurrentChange","handleAvatarSuccess","response","file","fileList","$set","handleAIGenerate","post","beforeAvatarUpload","isImage","indexOf"],"sources":["src/views/manager/BadgeStandard.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 搜索区域 -->\n    <div class=\"search\">\n      <el-input placeholder=\"勋章名称\" style=\"width: 200px\" v-model=\"badgeName\"></el-input>\n      <el-select placeholder=\"勋章类型\" style=\"width: 120px; margin-left: 10px\" v-model=\"badgeType\">\n        <el-option label=\"全部\" value=\"\"></el-option>\n        <el-option label=\"饮食\" value=\"饮食\"></el-option>\n        <el-option label=\"运动\" value=\"运动\"></el-option>\n      </el-select>\n      <el-button type=\"info\" plain style=\"margin-left: 10px\" @click=\"load(1)\">搜索</el-button>\n      <el-button type=\"warning\" plain @click=\"reset\">重置</el-button>\n    </div>\n\n    <!-- 操作按钮 -->\n    <div class=\"operation\">\n      <el-button type=\"primary\" plain @click=\"handleAdd\">新增勋章标准</el-button>\n      <el-button type=\"danger\" plain @click=\"delBatch\">批量删除</el-button>\n    </div>\n\n    <!-- 表格列表 -->\n    <div class=\"table\">\n      <el-table :data=\"tableData\" stripe @selection-change=\"handleSelectionChange\">\n        <el-table-column type=\"selection\" width=\"55\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"id\" label=\"ID\" width=\"80\" align=\"center\" sortable></el-table-column>\n        <el-table-column prop=\"type\" label=\"勋章类型\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"name\" label=\"勋章名称\" width=\"150\"></el-table-column>\n        <el-table-column prop=\"days\" label=\"达标天数\" width=\"100\" align=\"center\"></el-table-column>\n        <el-table-column prop=\"description\" label=\"描述说明\" width=\"200\"></el-table-column>\n\t\t<el-table-column label=\"图片\" width=\"200\">\n\t\t  <template slot-scope=\"scope\">\n\t\t\t<div style=\"width: 80px; height: 80px; border-radius: 50%; overflow: hidden; display: flex; justify-content: center; align-items: center; margin: 0 auto; border: 2px solid #ddd;\">\n\t\t\t  <img :src=\"scope.row.url\" alt=\"图片\" style=\"max-width: 100%; max-height: 100%; object-fit: cover;\" />\n\t\t\t</div>\n\t\t  </template>\n\t\t</el-table-column>\n        <el-table-column label=\"操作\" width=\"280\" align=\"center\">\n          <template v-slot=\"scope\">\n            <el-button type=\"primary\" plain size=\"mini\" @click=\"handleEdit(scope.row)\">编辑</el-button>\n            <el-button type=\"danger\" plain size=\"mini\" @click=\"del(scope.row.id)\">删除</el-button>\n            <!-- 保留行操作按钮：AI生成图片 -->\n            <el-button type=\"info\" plain size=\"mini\" @click=\"handleAIGenerate(scope.row)\">AI生成图片</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n\n      <!-- 分页 -->\n      <div class=\"pagination\">\n        <el-pagination\n          background\n          @current-change=\"handleCurrentChange\"\n          :current-page=\"pageNum\"\n          :page-size=\"pageSize\"\n          layout=\"total, prev, pager, next\"\n          :total=\"total\">\n        </el-pagination>\n      </div>\n    </div>\n\n    <!-- 新增/编辑对话框 -->\n    <el-dialog :title=\"form.id ? '编辑勋章标准' : '新增勋章标准'\" :visible.sync=\"formVisible\" width=\"40%\"\n               :close-on-click-modal=\"false\" destroy-on-close>\n      <el-form label-width=\"120px\" style=\"padding-right: 30px\" :model=\"form\" :rules=\"rules\" ref=\"formRef\">\n        <el-form-item label=\"勋章类型\" prop=\"type\">\n          <el-select v-model=\"form.type\" placeholder=\"请选择类型\" style=\"width: 100%\">\n            <el-option label=\"饮食\" value=\"饮食\"></el-option>\n            <el-option label=\"运动\" value=\"运动\"></el-option>\n          </el-select>\n        </el-form-item>\n        <el-form-item label=\"勋章名称\" prop=\"name\">\n          <el-input v-model=\"form.name\" placeholder=\"请输入勋章名称\"></el-input>\n        </el-form-item>\n        <el-form-item label=\"达标天数\" prop=\"days\">\n          <el-input-number \n            v-model=\"form.days\" \n            :min=\"0\" \n            :precision=\"0\"\n            controls-position=\"right\" \n            style=\"width: 100%\"\n            placeholder=\"请输入达标天数\"></el-input-number>\n        </el-form-item>\n        <el-form-item label=\"描述说明\" prop=\"description\">\n          <el-input v-model=\"form.description\" placeholder=\"请输入描述说明\"></el-input>\n        </el-form-item>\n        <!-- 使用头像上传方式来更改图片 -->\n        <el-form-item label=\"图片\" prop=\"url\">\n          <el-upload\n              class=\"avatar-uploader\"\n              :action=\"$baseUrl + '/files/upload'\"  \n              :show-file-list=\"false\"\n              :on-success=\"handleAvatarSuccess\"\r\n\t\t      :before-upload=\"beforeAvatarUpload\">\n            <img v-if=\"form.url\" :src=\"form.url\" class=\"avatar\" />\n            <i v-else class=\"el-icon-plus avatar-uploader-icon\"></i>\n          </el-upload>\n        </el-form-item>\n      </el-form>\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button @click=\"formVisible = false\">取 消</el-button>\n        <el-button type=\"primary\" @click=\"save\">确 定</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: \"BadgeStandard\",\n  data() {\n    return {\n      tableData: [],\n      pageNum: 1,\n      pageSize: 10,\n      total: 0,\n      badgeName: null,\n      badgeType: null,\n      formVisible: false,\n      form: {},\n      rules: {\n        type: [\n          { required: true, message: '请选择勋章类型', trigger: 'change' }\n        ],\n        name: [\n          { required: true, message: '请输入勋章名称', trigger: 'blur' },\n          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }\n        ],\n        days: [\n          { required: true, message: '请输入达标天数', trigger: 'blur' },\n          { type: 'number', message: '必须为数字值', trigger: 'blur' }\n        ]\n      },\n      ids: [],\n      // 当前需要更改图片的记录（用于表格行的手动更改图片）\n      currentRow: null\n    }\n  },\n  created() {\n    this.load(1)\n  },\n  methods: {\n    // 新增记录\n    handleAdd() {\n      this.form = { type: '饮食', days: 0 }\n      this.formVisible = true\n    },\n    // 编辑记录\n    handleEdit(row) {\n      this.form = JSON.parse(JSON.stringify(row))\n      this.formVisible = true\n    },\n    // 保存记录（新增或更新）\n    save() {\n      this.$refs.formRef.validate(valid => {\n        if (valid) {\n          this.$request({\n            url: this.form.id ? '/badgeStandard/update' : '/badgeStandard/add',\n            method: this.form.id ? 'PUT' : 'POST',\n            data: this.form\n          }).then(res => {\n            if (res.code === '200') {\n              this.$message.success('保存成功')\n              this.load(1)\n              this.formVisible = false\n            } else {\n              this.$message.error(res.msg)\n            }\n          })\n        }\n      })\n    },\n    // 删除单个记录\n    del(id) {\n      this.$confirm('确认删除该记录？', '警告', { type: 'warning' }).then(() => {\n        this.$request.delete(`/badgeStandard/delete/${id}`).then(res => {\n          if (res.code === '200') {\n            this.load(1)\n            this.$message.success('操作成功')\n          } else {\n            this.$message.error(res.msg)\n          }\n        })\n      })\n    },\n    // 多选框变化\n    handleSelectionChange(rows) {\n      this.ids = rows.map(item => item.id)\n    },\n    // 批量删除\n    delBatch() {\n      if (!this.ids.length) return this.$message.warning('请选择数据')\n      this.$confirm('确认批量删除选中记录？', '警告', { type: 'warning' }).then(() => {\n        this.$request.delete('/badgeStandard/delete/batch', { data: this.ids }).then(res => {\n          if (res.code === '200') {\n            this.load(1)\n            this.$message.success('操作成功')\n          } else {\n            this.$message.error(res.msg)\n          }\n        })\n      })\n    },\n    // 分页加载\n    load(pageNum) {\n      if (pageNum) this.pageNum = pageNum\n      this.$request.get('/badgeStandard/selectPage', {\n        params: {\n          pageNum: this.pageNum,\n          pageSize: this.pageSize,\n          badgeName: this.badgeName,\n          badgeType: this.badgeType\n        }\n      }).then(res => {\n        this.tableData = res.data?.list\n        this.total = res.data?.total\n      })\n    },\n    // 重置搜索条件\n    reset() {\n      this.badgeName = null\n      this.badgeType = null\n      this.load(1)\n    },\n    // 分页切换\n    handleCurrentChange(pageNum) {\n      this.pageNum = pageNum\n      this.load(pageNum)\n    },\r\n\thandleAvatarSuccess(response, file, fileList) {\r\n\t  // 把user的头像属性换成上传的图片的链接\r\n\t  this.$set(this.form, 'avatar', response.data)\r\n\t},\n    // 表格行“AI生成图片”调用后端生成接口\n    handleAIGenerate(row) {\n      this.$request.post('/py/create', { id: row.id }).then(res => {\n        if (res.code === '200') {\n          row.url = res.data.url\n          this.$message.success('AI生成图片成功')\n        } else {\n          this.$message.error(res.msg)\n        }\n      })\n    },\n    // 对话框中上传图片成功回调（借鉴头像上传方式）\n    //handleAvatarSuccess(response, file) {\n      // response.data 包含图片地址\n      //this.$set(this.form, 'url', response.data)\n      //this.$message.success('图片上传成功')\n      // 如果当前为编辑状态，则自动调用 update 更新记录\n      //if (this.form.id) {\n        //this.save()\n      //}\n    //},\n    // 上传前校验（可选）\n    beforeAvatarUpload(file) {\n      const isImage = file.type.indexOf('image/') === 0\n      if (!isImage) {\n        this.$message.error('上传文件必须为图片格式')\n      }\n      return isImage\n    }\n  }\n}\n</script>\n\n<style scoped>\n.search {\n  margin-bottom: 15px;\n}\n.operation {\n  margin: 10px 0;\n}\n.el-table .cell {\n  white-space: nowrap;\n}\n/* 头像上传样式 */\n.avatar-uploader {\n  display: block;\n}\n.avatar-uploader-icon {\n  font-size: 28px;\n  color: #8c939d;\n  width: 120px;\n  height: 120px;\n  line-height: 120px;\n  text-align: center;\n  border: 1px dashed #d9d9d9;\n  border-radius: 50%;\n}\n.avatar {\n  width: 120px;\n  height: 120px;\n  display: block;\n  border-radius: 50%;\n}\n</style>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}